#!/usr/bin/python

############################################################
#
#
#
#    THE YOH PROJECT
#    --------------------------------------------------
#
#    Copyright 2013 JT Paasch
#    License MIT <http://opensource.org/licenses/MIT>
#
#
############################################################


import os
import sys
import subprocess
import shutil
import getpass
import re


class Settings:
    """
    A generic container for settings.

    """

    program = "yoh"
    version = "0.1"
    devbox_folder = ".devbox"
    config_folder = devbox_folder + "/config"

    user_home = os.path.expanduser("~")
    source_config = user_home + "/.yoh/config"
    scripts_on_vm = "/home/vagrant/code/.devbox/config/bash/"


class Utilities:
    """
    A collection of utility methods.

    """

    @staticmethod
    def log(message):
        """
        Prints a message to STDOUT.

        """

        # Trim the message.
        result = message.strip()

        # Print it to STDOUT.
        print result


    @staticmethod
    def create_folder(folder):
        """
        Attempts to create a folder.
        Returns True on success, False on failure.

        """

        try:
            os.mkdir(folder, 0740)
        except OSError:
            return False
        else:
            return True


    @staticmethod
    def copy_folder(source, destination):
        """
        Attempts to copy a folder.
        Returns True on success, False on failure.

        """

        try:
            shutil.copytree(source, destination)
        except (OSError, IOError):
            return False
        else:
            return True


    @staticmethod
    def copy_file(source, destination):
        """
        Attempts to copy a folder.
        Returns True on success, False on failure.

        """

        try:
            shutil.copy(source, destination)
        except (OSError, IOError):
            return False
        else:
            return True


    @staticmethod
    def is_word(string):
        """
        Is the specified string a word, i.e., does it
        consist only of letters and numbers, with no spaces?

        """

        # Use a regular expression to find the correct pattern. 
        matches = re.match(r'^[a-zA-Z0-9]+$', string)

        # Is there a match?
        if matches:
            return True
        else:
            return False


    @staticmethod
    def file_exists(path):
        """
        Checks if a file exists.

        """

        try:
            with open(path):
                return True
        except IOError:
            return False


class Installer:
    """
    Handles installation of the VM.

    """

    @staticmethod
    def init():
        """ 
        Initialize the installer.

        """

        # Make sure this folder isn't already initialized.
        # Does a devbox folder exist?
        devbox = Installer.find_devbox()

        # If there is a devbox, alert the user and exit.
        if devbox:
            message1  = "This folder is already initialized."
            message2  = "To re-initialize, "
            message2 += "run '" + Settings.program + " destroy' first."
            Utilities.log(message1)
            Utilities.log(message2)
            exit(1)

        # Check that all required programs are installed.
        Installer.check_requirements()

        # Configure the devbox.
        Installer.configure_devbox()

        # Print a message.
        message  = "Configured for use. "
        message += "Use '" + Settings.program + " up' to boot the VM."
        Utilities.log(message)


    @staticmethod
    def find_devbox(path = None):
        """
        This method recursively walks the directory tree up, 
        until it finds a devbox folder. If one is found, it 
        returns the path. If none is found, it returns None.

        """

        # If no path is specified, use the current working directory.
        if path is None:
            path = os.getcwd()

        # What is the full path of the devbox folder (if it existed here)?
        if path == '/':
            devbox = path + Settings.devbox_folder
        else:
            devbox = path + os.sep + Settings.devbox_folder

        # Does it exist here?
        if os.path.isdir(devbox):
            return devbox

        else:
        
            # What's the parent folder?
            parent_folder = os.path.dirname(path)

            # If we're at the root, the parent will also be the root.
            # We don't need to proceed at this point. 
            # We haven't found the devbox folder, and we can't 
            # go up any further in the directory tree.
            if path == parent_folder:
                return None

            # Is it a real directory? If so, call this function on it again
            # to see if a devbox folder exists in it.
            if os.path.isdir(parent_folder):
                return Installer.find_devbox(parent_folder)

            # If there is no parent folder, we're at the root of the 
            # directory tree, so we haven't found a devbox folder.
            else:
                return None


    @staticmethod
    def check_requirements():
        """ 
        Checks for required software on the user's system.

        """

        # Which programs are reqired?
        required_programs = ['virtualbox', 'vagrant']

        # Make sure the required programs are installed.
        for program in required_programs:

            # What's the path to the executable?
            try:
                subprocess.check_output(['which', program])
            except subprocess.CalledProcessError:
                message = "Please install " + program + " before proceeding."
                Utilities.log(message)
                exit(1)
 

    @staticmethod
    def configure_devbox():
        """
        Create a .devbox folder and copy config files into it.

        """

        # Does a devbox folder already exist?
        is_present = os.path.isdir(Settings.devbox_folder)

        # If so, alert the user and exit.
        if is_present:
            message1  = "This folder is already initialized."
            message2  = "To re-initialize, "
            message2 += "run '" + Settings.program + " destroy' first."
            Utilities.log(message1)
            Utilities.log(message2)
            exit(1)

        # Create the config folder in the current directory.
        Utilities.create_folder(Settings.devbox_folder)

        # Copy config files.
        source_folder = Settings.source_config
        dest_folder = Settings.config_folder
        folder_copied = Utilities.copy_folder(source_folder, dest_folder)

        # Report any errors.
        if not folder_copied:
            Utilities.log("Could not copy config files.")
            exit(1)

        # Copy the Vagrantfile to the root of the devbox folder.
        source_file = Settings.config_folder + "/vagrant/Vagrantfile"
        dest_location = Settings.devbox_folder
        file_copied = Utilities.copy_file(source_file, dest_location)

        # Report any errors.
        if not file_copied:
            Utilities.log("Could not copy Vagrantfile.")
            exit(1)


class Vagrant:
    """
    Handles vagrant commands.

    """

    @staticmethod
    def stop_if_not_init():
        """
        Checks if the folder is initialized for vagrant.
        Stops the program if not.

        """

        # Does a devbox folder exist?
        devbox = Installer.find_devbox()

        # If no devbox, alert the user and exit.
        if devbox is None:
            message  = "This folder is not initialized. "
            message += "Run '" + Settings.program + " init' first."
            Utilities.log(message)
            exit(1)

        # Otherwise, save the devbox folder.
        else:
            Settings.devbox_folder = devbox


    @staticmethod
    def up():
        """
        Boots the VM up.

        """

        # Stop the program if no init has occurred.
        Vagrant.stop_if_not_init()

        # Run vagrant up from the vagrant folder.
        command = ["vagrant", "up"]
        cwd = Settings.devbox_folder

        try:
            result = subprocess.check_call(command, cwd=cwd)
        except subprocess.CalledProcessError:
            Utilities.log("Could not run 'vagrant up'.")
            exit(1)
 

    @staticmethod
    def down():
        """
        Boots the VM down.

        """

        # Stop the program if no init has occurred.
        Vagrant.stop_if_not_init()

        # Run vagrant halt from the vagrant folder.
        command = ["vagrant", "halt"]
        cwd = Settings.devbox_folder
        try:
            result = subprocess.check_call(command, cwd=cwd)
        except subprocess.CalledProcessError:
            Utilities.log("Could not run 'vagrant halt'.")
            exit(1)


    @staticmethod
    def destroy():
        """
        Destroys the VM altogether.

        """

        # Stop the program if no init has occurred.
        Vagrant.stop_if_not_init()

        # Run vagrant destroy from the vagrant folder.
        command = ["vagrant", "destroy"]
        cwd = Settings.devbox_folder
        try:
            result = subprocess.check_call(command, cwd=cwd)
        except subprocess.CalledProcessError:
            Utilities.log("Could not run 'vagrant destroy'.")
            exit(1)


    @staticmethod
    def provision():
        """
        Re-provision the VM.

        """

        # Stop the program if no init has occurred.
        Vagrant.stop_if_not_init()

        # Run vagrant provision from the vagrant folder.
        command = ["vagrant", "provision"]
        cwd = Settings.devbox_folder
        try:
            result = subprocess.check_call(command, cwd=cwd)
        except subprocess.CalledProcessError:
            Utilities.log("Could not run 'vagrant provision'.")
            exit(1)


    @staticmethod
    def ssh():
        """
        SSH into the VM.

        """

        # Stop the program if no init has occurred.
        Vagrant.stop_if_not_init()

        # Run vagrant ssh from the vagrant folder.
        command = ["vagrant", "ssh"]
        cwd = Settings.devbox_folder
        try:
            result = subprocess.check_call(command, cwd=cwd)
        except subprocess.CalledProcessError:
            Utilities.log("Could not run 'vagrant ssh'.")
            exit(1)


    @staticmethod
    def run_script_on_vm(script, arguments=None):
        """
        Runs a bash script on the VM.
        It uses the `vagrant ssh -c "<path to script>"` command.

        """

        # Stop the program if no init has occurred.
        Vagrant.stop_if_not_init()

        # What is the path to the script files on the VM?
        path = "sudo -u vagrant bash " + Settings.scripts_on_vm + script

        # Are there any arguments?
        if arguments:
            path = path + ' ' + arguments

        # Make sure the cabal path is in the environment's PATH.
        path = "export PATH=/home/vagrant/.cabal/bin:$PATH; " + path

        # Run vagrant ssh -c "<commands>" from the vagrant folder.
        command = ['vagrant', 'ssh', '-c', path]
        cwd = Settings.devbox_folder
        try:
            result = subprocess.check_call(command, cwd=cwd)
        except subprocess.CalledProcessError:
            Utilities.log("Running " + script + " on the VM failed.")
            exit(1)


    @staticmethod
    def run_command_on_vm(command):
        """
        Runs a command on the VM.
        It uses `vagrant ssh -c "<command>"` to do this.

        """

        # Stop the program if no init has occurred.
        Vagrant.stop_if_not_init()

        # Make sure the cabal path is in the environment's PATH.
        command = "export PATH=/home/vagrant/.cabal/bin:$PATH; " + path

        # Run vagrant ssh -c "<commands>" from the vagrant folder.
        full_command = ['vagrant', 'ssh', '-c', command]
        cwd = Settings.devbox_folder
        try:
            result = subprocess.check_call(full_command, cwd=cwd)
        except subprocess.CalledProcessError:
            Utilities.log("Running " + command + " on the VM failed.")
            exit(1)


class Yesod:
    """
    This class handles Yesod-specific activities, like generating 
    a scaffolded site or running the Yesod dev web server.

    """

    @staticmethod
    def check_for_site(site):
        """
        Makes sure there is a fully scaffolded Yesod site 
        with the specified name.

        """

        # Construct the path to the site folder.
        site_path = os.path.dirname(Settings.devbox_folder) + os.sep + site

        # Make sure the folder exists. If there's no folder,
        # there is no such site. 
        if not os.path.isdir(site_path):
            message1 = "There is no site named '" + site + "'."
            message2 = "Please create it first with the command: "
            message2 += Settings.program + " create " + site
            Utilities.log(message1)
            Utilities.log(message2)
            exit(1) 


    @staticmethod
    def create(site):
        """
        This creates a fully scaffolded Yesod site/project.

        """

        # Run the "createsite" script on the VM. 
        # That will create the site for you.
        Vagrant.run_script_on_vm('createsite', site)


    @staticmethod
    def run(site):
        """
        This runs the specified site on the development server.

        """

        # Run the "startdevserver" script on the VM.
        # That will start the Yesod development server.
        Vagrant.run_script_on_vm('startdevserver', site)


class Heroku:
    """
    Handles heroku stuff.

    """

    @staticmethod
    def stop_if_herokufied(site):
        """
        Stops the script if the site is already herokufied.

        """

        # We can tell if the site has been herokufied if
        # a Helpers/Heroku.hs file exists, since that file gets 
        # created during the process of making the site heroku-ready.
        heroku_file = os.path.dirname(Settings.devbox_folder) + os.sep 
        heroku_file += site + os.sep + "Helpers" + os.sep + "Heroku.hs"
        if Utilities.file_exists(heroku_file):
            Utilities.log("Site already ready for heroku.")
            exit(1)


    @staticmethod
    def herokufy(site):
        """
        Initialize heroku configuration variables.

        """

        # Stop the program if the folder isn't initialized yet.
        Vagrant.stop_if_not_init()

        # Stop the program if the site is already herokufied.
        Heroku.stop_if_herokufied(site)

        # Run the "installheroku" script on the VM.
        # That will install Heroku on the VM.
        Vagrant.run_script_on_vm('installheroku')

        # Print a message.
        Utilities.log("")
        Utilities.log("----")
        Utilities.log("")

        # Run the "installherokukeys" script on the VM.
        # That will add heroku keys on the VM so the user doesn't
        # need to enter their username/password every time they
        # need to push to heroku.
        Vagrant.run_script_on_vm('installherokukeys')

        # Run the "herokufysite" script on the VM.
        # That will make the site heroku-ready.
        Vagrant.run_script_on_vm('herokufy', site)

        # Print a message.
        Utilities.log("")
        Utilities.log("----")
        Utilities.log("")
        Utilities.log("Site '" + site + "' ready to deploy to heroku.")



class Dispatcher:
    """
    This class dispatches commands from the command line 
    to the appropriate classes/modules to handle them.

    """

    @staticmethod
    def usage():
        """
        Prints the usage/instructions for the program.

        """

        print ""
        print "Yoh " + Settings.version + ":"
        print "- Builds a Haskell Yesod site on a VM, "
        print "  and deploys it to Heroku."
        print ""
        print "Usage: "
        print "- yoh [command]"
        print ""
        print "Commands:"
        print "- yoh init             Initialize the VM"
        print "- yoh up               Boot up the VM"
        print "- yoh down             Boot down the VM"
        print "- yoh ssh              Log on to the VM (via SSH)"
        print "- yoh provision        Re-provision the VM"
        print "- yoh destroy          Delete/remove the VM"
        print ""
        print "- yoh create <site>    Create a Yesod site (named <site>)"
        print "- yoh run <site>       Run the site (named <site>)"
        print ""
        print "- yoh herokufy <site>  Make <site> Heroku-ready"
        print "- yoh deploy heroku    Deploy the site to Heroku"
        print ""


    @staticmethod
    def version():
        """
        Prints the version number.

        """

        Utilities.log(Settings.program + " version " + Settings.version)


    @staticmethod
    def init():
        """
        Initialize a folder so it's ready for a VM.
        That is, install all the config files needed to boot the VM.

        """

        # Run the Installer's `init` function.
        Installer.init()


    @staticmethod
    def vagrant(command):
        """
        Run a basic vagrant command.

        """

        # Was the command "up"?
        if command == 'up':
            Vagrant.up()

        # Was the command "down"?
        elif command == "down":
            Vagrant.down()

        # Was the command "ssh"?
        elif command == "ssh":
            Vagrant.ssh()

        # Was the command "provision"?
        elif command == "provision":
            Vagrant.provision()

        # Was the command "destroy"?
        elif command == "destroy":
            Vagrant.destroy()


    @staticmethod
    def create(site):
        """
        Create a Yesod site.

        """

        # Make sure the site name is all lowercased,
        # with no spaces. Yesod requires that.
        if not Utilities.is_word(site):
            Utilities.log("Site names must contain letters and numbers only,")
            Utilities.log("with no spaces, dashes, or underscores.")
            Utilities.log("Please choose a valid site name.")
            exit(1)

        # Create the site.
        Yesod.create(site)


    @staticmethod
    def run(site):
        """
        Run a Yesod site on the development server.

        """

        # Make sure there is a site by this name.
        Yesod.check_for_site(site)

        # Now run the site on the development server.
        Yesod.run(site)


    @staticmethod
    def herokufy(site):
        """
        Make a Yesod site heroku-ready.

        """

        # Make sure there is a site by this name.
        Yesod.check_for_site(site)

        # Now herokufy the site.
        Heroku.herokufy(site)


def main():
    """
    The main entry point into the program.

    """

    # Get the command line arguments passed to this program.
    # We can use the old classic "sys.argv" to get them.
    arguments = sys.argv

    # If there are no arguments, print the program's usage and exit.
    if len(arguments) < 2:
        Dispatcher.usage()
        exit(0)

    # Otherwise, go ahead and get the first argument. Let's call it "command".
    command = arguments[1]

    # If there's a second argument, call that the "option".
    if len(arguments) > 2:
        option = arguments[2]

    # Was the command "version" or "--version"?
    if command == 'version' or command == '--version':
        Dispatcher.version()

    # Was the command "init"?
    elif command == 'init':
        Dispatcher.init()

    # Was the command "up"?
    elif command == 'up':
        Dispatcher.vagrant('up')

    # Was the command "down"?
    elif command == "down":
        Dispatcher.vagrant('down')

    # Was the command "ssh"?
    elif command == "ssh":
        Dispatcher.vagrant('ssh')

    # Was the command "provision"?
    elif command == "provision":
        Dispatcher.vagrant('provision')

    # Was the command "destroy"?
    elif command == "destroy":
        Dispatcher.vagrant('destroy')

    # Was the command "create <site>"?
    elif command == "create":

        # Stop the program if there's no devbox folder.
        Vagrant.stop_if_not_init()

        # The site name will be the option argument.
        # Make sure the option argument was given.
        try:
            site = option
        except NameError:
            Utilities.log("Please specify a site name.")
            Utilities.log("Usage: yoh create <site>")
            exit(1)

        # Now we can dispatch the activity.
        Dispatcher.create(site)

    # Was the command "run <site>"?
    elif command == "run":

        # Stop the program if there's no devbox folder.
        Vagrant.stop_if_not_init()

        # The site name will be the option argument.
        # Make sure the option argument was given.
        try:
            site = option
        except NameError:
            Utilities.log("Please specify a site name.")
            Utilities.log("Usage: yoh run <site>")
            exit(1)

        # Now we can dispatch the activity.
        Dispatcher.run(site)

    # Was the command "herokufy <site>"?
    elif command == "herokufy":

        # Stop the program if there's no devbox folder.
        Vagrant.stop_if_not_init()

        # The site name must be the option argument.
        # Make sure the option argument was given.
        try:
            site = option
        except NameError:
            Utilities.log("Please specify a site name.")
            Utilities.log("Usage: yoh herokufy <site>")
            exit(1)

        # Now we can dispatch the activity.
        Dispatcher.herokufy(site)

    # Was the command "deploy heroku"?
    elif command == "deploy":

        # Stop the program if there's no devbox folder.
        Vagrant.stop_if_not_init()

        Utilities.log("Not implemented...")
        exit(1)

    # If we don't know what to do with what the user typed,
    # just print the help message.
    else:
        Dispatcher.usage()

    # Exit cleanly.
    exit(0)


# Run the main() function if this is executed as a program.
if __name__ == "__main__":
    main()


